#!/bin/bash
# Job name
#PBS -N job
# Output files
#PBS -o ./job.o
#PBS -e ./job.e
# Queue name
#PBS -q short_cpuQ
# Set the maximum wall time
#PBS -l walltime=0:15:00
# Number of nodes, cpus, mpi processors and amount of memory
#PBS -l select=1:ncpus=65:mpiprocs=65:mem=990mb

# Modules for python and MPI
module load gcc91
module load mpich-3.2.1--gcc-9.1.0

gcc() {
    gcc-9.1.0 "$@"
}
gcc --version


# Print the name of the file that contains the list of the nodes assigned to the job and list all the nodes
# NODES=$(cat $PBS_NODEFILE)
# echo The running nodes are $NODES

# Get the list of unique nodes assigned to the job
# RIMETTERLO DOPO
# NODES=$(sort -u $PBS_NODEFILE)
# echo The running nodes are $NODES

# Loop through each node and get architecture information
# for NODE in $NODES; do
#    echo "Node: $NODE"
#    ssh $NODE "lscpu"
# done

# lscpu

# Select the working directory 
cd /home/alessandro.benassi/MPIproject

# VARIABLES
# number of repetitions
repetitions="25"
# dimension of the matrix list
 input_num=("16" "32" "64" "128" "256" "512" "1024" "2048" "4096")
# input_num=("1024" "2048" "4096")
# number of threads list
n_threads=("1" "2" "4" "8" "16" "32" "64")
# n_threads=("16" "32" "64")

# creates a new directory for the results
dir_path="/home/alessandro.benassi/MPIproject"
dir_name="debugMPI_"

n=1

# checking if the directory already exists
while [ -d "${dir_path}/${dir_name}${n}" ]; do
  n=$((n+1))
done

# creating a new directory result_n inside the given path
new_dir="${dir_path}/${dir_name}${n}"
mkdir -p "$new_dir"


# SEQUENTIAL
gcc seqfunc.c seqmain.c -fopenmp
gcc -O0 -o seq1 seqfunc.c seqmain.c -fopenmp
for input in "${input_num[@]}"; do
	  echo "Running the program with $input"
	  ./seq1 "$input" "$repetitions"
done


# the code should be previously compiled
mpicc mpifunc.c mpimain.c
mpicc -o exec mpifunc.c mpimain.c

# Run the code
for input in "${input_num[@]}"; do
	  for i in "${n_threads[@]}"; do
		    echo "MPI $input $i"
		       mpirun -np "$i" ./exec "$input" "$repetitions"
	  done

done
# If you set the number of mpi processors, here it is enough to type
# mpirun ./code.out



# file name declarations
first="times_table.csv"
second="times_average.csv"

# moving files to the new directory
mv "$first" "${dir_name}${n}"
 
mv "$second" "${dir_name}${n}"

# mv "job.o" "${dir_name}${n}"
